import sqlite3
import numpy as np
import os
import subprocess

from keras.models import Sequential
from keras.layers import Dense
from keras.layers import Dropout
from keras.layers import Flatten


database = r"./AndroSecDatabases-master/AndrosecData.sqlite"

connection = sqlite3.connect(database)
crsr = connection.cursor()

# Get intents
cmd = "SELECT * FROM Intent"
crsr.execute(cmd)
intents = np.array(crsr.fetchall())[:, 1]

for i in range(0, len(intents)) :
    intents[i] = intents[i].strip()

# Get permissions
cmd = "SELECT * FROM Permission"
crsr.execute(cmd)
perms = np.array(crsr.fetchall())[:, 1]

for i in range(0, len(perms)) :
    perms[i] = perms[i].strip()


num_features = intents.shape[0] + perms.shape[0]
print("Num features: {}".format(num_features))

# features = np.array((num_features))
features_text = np.append(intents, perms)
print(features_text.shape)

num_data = 1068

x_tr_MF = np.zeros((num_data, num_features))
y_tr_M  = np.zeros(num_data)


mal_dir = r"./malware-unpacked"
benign_dir = r"./benign-unpacked"

# Grab data from manifests
# for dir_name, subdirs, files in os.walk(mal_dir) :
#     for f in files :
#         if ".apk" in f :
#             proc = subprocess.Popen(["apktool", "d", os.path.join(dir_name, f)], stdout=subprocess.PIPE)
#             out, err = proc.communicate()
#             print("done")

data_idx = 0

for dir_name, subdirs, files in os.walk(mal_dir) :
    if dir_name.split(os.sep)[-1] == "original" :
        continue
    for f in files :
        if f == "AndroidManifest.xml" :
            with open(os.path.join(dir_name, f), "r") as opened_f :
                try :
                    text = opened_f.read()
                except :
                    print(os.path.join(dir_name, f))
            feature_vec = np.zeros(num_features)
            for i in range(num_features) :
                if features_text[i] in text :
                    feature_vec[i] = 1
            x_tr_MF[data_idx] = feature_vec
            y_tr_M[data_idx] = 1
            data_idx += 1

seen_apps = []
for dir_name, subdirs, files in os.walk(benign_dir) :
    for f in files :
        if f == "AndroidManifest.xml" :
            app_name = os.path.dirname(os.path.join(dir_name, f)).split(os.sep)[-2]
            if app_name not in seen_apps :

                # print(app_name)
                seen_apps.append(app_name)
                with open(os.path.join(dir_name, f), "r") as opened_f :
                    try :
                        text = opened_f.read()
                    except :
                        print(os.path.join(dir_name, f))
                feature_vec = np.zeros(num_features)
                for i in range(num_features) :
                    if features_text[i] in text :
                        feature_vec[i] = 1
                x_tr_MF[data_idx] = feature_vec
                y_tr_M[data_idx] = 0
                data_idx += 1

print(data_idx)
print(len(seen_apps))



model = Sequential()
model.add(Dense(1000, input_dim=num_features, activation='relu'))
model.add(Dense(1000, activation='relu'))
model.add(Dense(1, activation='sigmoid'))

model.compile(loss='binary_crossentropy', optimizer='adam', metrics=['accuracy'])

model.fit(x_tr_MF, y_tr_M, epochs=25)
scores = model.evaluate(x_tr_MF, y_tr_M)
print("Accuracy: %.2f%%" % (scores[1] * 100))
