import sqlite3
import numpy as np
import os
import subprocess

from keras.models import Sequential
from keras.models import load_model
from keras.layers import Dense
from keras.layers import Dropout
from keras.layers import Flatten

from sklearn.utils import shuffle

import csv

apk_output_dir = "apk_out"

def vectorize_apk(filename, feature_labels) :
    cmd = "apktool d -o {} {}".format(apk_output_dir + os.sep +  filename.split(os.sep)[-1][:-4], filename)
    proc = subprocess.Popen(cmd.split(), stdout=subprocess.PIPE)
    out, err = proc.communicate()

    with open(os.path.join(apk_output_dir, filename.split(os.sep)[-1][:-4], "AndroidManifest.xml")) as file :
        text = file.read()

    num_features = feature_labels.shape[0]
    data_vector = np.zeros(num_features)
    for i in range(num_features) :
        if feature_labels[i] in text :
            data_vector[i] = 1

    return data_vector



def train_model() :
    x_tr_MF = np.loadtxt("x_training.txt")
    y_tr_M = np.loadtxt("y_training.txt")

    x_tr_MF, y_tr_M = shuffle(x_tr_MF, y_tr_M)

    num_features = x_tr_MF.shape[1]

    model = Sequential()
    model.add(Dense(1000, input_dim=num_features, activation='relu'))
    model.add(Dense(1000, activation='relu'))
    model.add(Dense(1, activation='sigmoid'))

    model.compile(loss='binary_crossentropy', optimizer='adam', metrics=['accuracy'])

    model.fit(x_tr_MF, y_tr_M, epochs=25, validation_split=0.1)
    scores = model.evaluate(x_tr_MF, y_tr_M)


    return model

def predict(filename) :
    try :
        model = load_model("model.h5")
    except :
        print("No cached model found. Training from data")
        model = train_model()
        model.save("model.h5")


    # with open("perms_labels.txt") as perms_file :
    #     perms_labels = perms_file.read().split("\n")
    # with open("intents_labels.txt") as intents_file :
    #     intents_labels = intents_file.read().split("\n")

    with open("data_labels.txt") as labels_file :
        labels = labels_file.read().split("\n")

    # feature_labels = np.append(perms_labels, intents_labels)
    feature_labels = np.array(labels)
    vec = vectorize_apk(filename, feature_labels)

    num_features = feature_labels.shape[0]
    input_data = np.zeros((1, num_features))
    input_data[0] = vec

    prediction = model.predict(input_data)
    print("Prediction (1=malware, 0=benign): " + str(prediction[0]))
